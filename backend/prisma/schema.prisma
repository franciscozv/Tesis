// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  // lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model People {
  id             Int              @id @default(autoincrement())
  firstname      String
  lastname       String
  address        String
  phone          String
  baptismDate    DateTime
  convertionDate DateTime
  birthdate      DateTime
  gender         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  groups         PeopleOnGroups[]
}

model PeopleRole {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  peopleOnGroups PeopleOnGroups[]
  groupRoles  GroupRoleAssignment[]
}

model Group {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  mision      String?
  vision      String?
  color       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  members     PeopleOnGroups[]
  groupRoles  GroupRoleAssignment[]
}

model PeopleOnGroups {
  personId  Int
  person    People   @relation(fields: [personId], references: [id])
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id])
  personRoleId Int
  personRole PeopleRole @relation(fields: [personRoleId], references: [id])
  assignedAt DateTime @default(now())
  status    String   @default("ACTIVE")

  @@id([personId, groupId])
}

model GroupRoleAssignment {
  id          Int      @id @default(autoincrement())
  groupId    Int
  group      Group    @relation(fields: [groupId], references: [id])
  roleId     Int
  role       PeopleRole @relation(fields: [roleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDateTime    DateTime
  endDateTime      DateTime
  state      State   @default(PENDING)
  reviewComment String?
  eventTypeId Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  placeId     Int
  place       Place     @relation(fields: [placeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Place {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  address     String
  phones      String
  email       String
  photoUrl    String
  rooms      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

enum State {
  PENDING
  APPROVED
  REJECTED
}

// model PostEvent {
//   id          Int      @id @default(autoincrement())
//   photoUrl    String
//   comment     String
//   conclution  String
//   eventId     Int
//   event       Event?   @relation(fields: [eventId], references: [id])
// }

model Responsibility {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  color       String
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}